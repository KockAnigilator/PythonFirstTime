import os
import random
import sys

class SimpleUnit:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —é–Ω–∏—Ç–∞"""
    def __init__(self, name, health=100, attack=10, armor=5, move_range=1):
        self.name = name
        self.health = health
        self.max_health = health
        self.attack = attack
        self.armor = armor
        self.move_range = move_range
        self.x = None
        self.y = None
    
    def set_position(self, x, y):
        self.x = x
        self.y = y
    
    def get_position(self):
        return (self.x, self.y)
    
    def is_alive(self):
        return self.health > 0
    
    def take_damage(self, damage):
        actual_damage = max(1, damage - self.armor)
        self.health -= actual_damage
        return actual_damage
    
    def move(self, new_x, new_y):
        distance = abs(new_x - self.x) + abs(new_y - self.y)
        if distance <= self.move_range:
            self.x, self.y = new_x, new_y
            return True
        return False
    
    def __str__(self):
        return f"{self.name} (HP: {self.health}, ATK: {self.attack})"

class SimpleGameField:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ"""
    def __init__(self, width=10, height=10, max_units=20):
        self.width = width
        self.height = height
        self.max_units = max_units
        self.grid = [[None for _ in range(width)] for _ in range(height)]
        self.units = []
        self.bases = []
    
    def add_unit(self, unit, x, y):
        if len(self.units) >= self.max_units:
            print(f"‚ùå –ú–∞–∫—Å–∏–º—É–º —é–Ω–∏—Ç–æ–≤: {self.max_units}")
            return False
        
        if not (0 <= x < self.width and 0 <= y < self.height):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})")
            return False
        
        if self.grid[y][x] is not None:
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({x}, {y}) –∑–∞–Ω—è—Ç–∞")
            return False
        
        unit.set_position(x, y)
        self.grid[y][x] = unit
        self.units.append(unit)
        print(f"‚úÖ {unit.name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ ({x}, {y})")
        return True
    
    def add_base(self, base, x, y):
        if not (0 <= x < self.width and 0 <= y < self.height):
            return False
        
        if self.grid[y][x] is not None:
            return False
        
        base.set_position(x, y)
        self.grid[y][x] = base
        self.bases.append(base)
        return True
    
    def display(self):
        print(f"\nüéÆ –ü–û–õ–ï {self.width}x{self.height}")
        print("   " + " ".join(f"{i:2}" for i in range(self.width)))
        
        for y in range(self.height):
            row = f"{y:2} "
            for x in range(self.width):
                cell = self.grid[y][x]
                if isinstance(cell, SimpleUnit):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ –∏–º–µ–Ω–∏
                    if "–≤—Ä–∞–∂–µ—Å–∫–∏–π" in cell.name.lower():
                        row += "[E]"  # –í—Ä–∞–≥
                    else:
                        row += "[U]"  # –ò–≥—Ä–æ–∫
                elif hasattr(cell, 'name') and '–±–∞–∑–∞' in cell.name.lower():
                    if "–≤—Ä–∞–∂–µ—Å–∫–∞—è" in cell.name.lower():
                        row += "[B]"  # –í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞
                    else:
                        row += "[H]"  # –î–æ–º–∞—à–Ω—è—è –±–∞–∑–∞
                else:
                    row += " . "
            print(row)
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –Æ–Ω–∏—Ç–æ–≤: {len(self.units)}/{self.max_units}")
        print(f"  –ë–∞–∑: {len(self.bases)}")
        
        if self.units:
            print("\nüë• –Æ–Ω–∏—Ç—ã –Ω–∞ –ø–æ–ª–µ:")
            for unit in self.units:
                x, y = unit.get_position()
                side = "–í—Ä–∞–≥" if "–≤—Ä–∞–∂–µ—Å–∫–∏–π" in unit.name.lower() else "–ò–≥—Ä–æ–∫"
                print(f"  - {unit.name} ({side}) –Ω–∞ ({x}, {y}) - HP: {unit.health}")

class SimpleBase:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∞–∑–∞"""
    def __init__(self, name):
        self.name = name
        self.health = 500
        self.resources = 200  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        self.owned_units = []
        self.x = None
        self.y = None
    
    def set_position(self, x, y):
        self.x = x
        self.y = y
    
    def get_position(self):
        return (self.x, self.y)
    
    def create_unit(self, unit_type, game_field):
        unit_types = {
            'warrior': SimpleUnit("–í–æ–∏–Ω", 120, 15, 10),
            'archer': SimpleUnit("–õ—É—á–Ω–∏–∫", 80, 20, 5, 2),
            'knight': SimpleUnit("–†—ã—Ü–∞—Ä—å", 150, 25, 15)
        }
        
        if unit_type not in unit_types:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {unit_type}")
            return False
        
        if self.resources < 100:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤")
            return False
        
        unit = unit_types[unit_type]
        
        # –î–ª—è –≤—Ä–∞–∂–µ—Å–∫–æ–π –±–∞–∑—ã –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Å—Ç–∞–≤–∫—É
        if "–≤—Ä–∞–∂–µ—Å–∫–∞—è" in self.name.lower():
            unit.name = "–í—Ä–∞–∂–µ—Å–∫–∏–π " + unit.name.lower()
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞
        for dy in [-1, 0, 1]:
            for dx in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                spawn_x, spawn_y = self.x + dx, self.y + dy
                if (0 <= spawn_x < game_field.width and 
                    0 <= spawn_y < game_field.height and 
                    game_field.grid[spawn_y][spawn_x] is None):
                    
                    if game_field.add_unit(unit, spawn_x, spawn_y):
                        self.owned_units.append(unit)
                        self.resources -= 100
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω {unit.name}, —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {self.resources}")
                        return True
        
        print("‚ùå –ù–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞")
        return False
    
    def get_status(self):
        return f"{self.name}: ‚ù§Ô∏è {self.health} üí∞ {self.resources} üë• {len(self.owned_units)}"

class EnemyAI:
    """–ü—Ä–æ—Å—Ç–æ–π –ò–ò –¥–ª—è –≤—Ä–∞–∂–µ—Å–∫–æ–π –±–∞–∑—ã"""
    def __init__(self, game):
        self.game = game
        self.aggression = 0.4  # –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –ò–ò
    
    def take_turn(self):
        """–•–æ–¥ –ò–ò"""
        if not self.game.enemy_base or self.game.enemy_base.resources < 100:
            return
        
        # –°–ª—É—á–∞–π–Ω–æ —Ä–µ—à–∞–µ–º, —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ —é–Ω–∏—Ç–∞
        if random.random() < self.aggression and len(self.game.enemy_base.owned_units) < 5:
            unit_type = random.choice(['warrior', 'archer', 'knight'])
            self.game.enemy_base.create_unit(unit_type, self.game.field)
        
        # –ê—Ç–∞–∫—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞
        player_units = [u for u in self.game.field.units if u not in self.game.enemy_base.owned_units]
        enemy_units = [u for u in self.game.field.units if u in self.game.enemy_base.owned_units]
        
        if player_units and enemy_units and random.random() < self.aggression:
            attacker = random.choice(enemy_units)
            target = random.choice(player_units)
            self.attack(attacker, target)
    
    def attack(self, attacker, target):
        """–ê—Ç–∞–∫–∞ —é–Ω–∏—Ç–∞"""
        damage = max(1, attacker.attack - target.armor)
        target.take_damage(damage)
        print(f"‚öîÔ∏è {attacker.name} –∞—Ç–∞–∫—É–µ—Ç {target.name} –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!")
        
        if not target.is_alive():
            print(f"üíÄ {target.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
            # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤–æ–≥–æ —é–Ω–∏—Ç–∞ —Å –ø–æ–ª—è
            x, y = target.get_position()
            self.game.field.grid[y][x] = None
            self.game.field.units.remove(target)

class SimpleGame:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å –≤—Ä–∞–≥–∞–º–∏ –∏ –±–æ—è–º–∏"""
    def __init__(self):
        self.field = None
        self.turn_count = 0
        self.enemy_base = None
        self.enemy_ai = EnemyAI(self)
    
    def initialize(self):
        print("\nüéÆ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´")
        
        width = 8
        height = 8
        self.field = SimpleGameField(width, height)
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –±–∞–∑—É (–º–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)
        base = SimpleBase("–ì–ª–∞–≤–Ω–∞—è –±–∞–∑–∞")
        self.field.add_base(base, 1, 1)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–∂–µ—Å–∫—É—é –±–∞–∑—É
        self.enemy_base = SimpleBase("–í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞")
        self.field.add_base(self.enemy_base, 6, 6)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞
        warrior = SimpleUnit("–í–æ–∏–Ω")
        self.field.add_unit(warrior, 2, 2)
        base.owned_units.append(warrior)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –≤—Ä–∞–≥–∞
        enemy_warrior = SimpleUnit("–í—Ä–∞–∂–µ—Å–∫–∏–π –≤–æ–∏–Ω")
        self.field.add_unit(enemy_warrior, 5, 5)
        self.enemy_base.owned_units.append(enemy_warrior)
        
        print("‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üéØ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Ä–∞–∂–µ—Å–∫—É—é –±–∞–∑—É!")
    
    def show_menu(self):
        while True:
            print(f"\n{'='*40}")
            print(f"üéÆ –•–û–î {self.turn_count}")
            print(f"{'='*40}")
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ")
            print("2. –°–æ–∑–¥–∞—Ç—å —é–Ω–∏—Ç–∞")
            print("3. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —é–Ω–∏—Ç–∞") 
            print("4. –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
            print("5. –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥")
            print("6. –°—Ç–∞—Ç—É—Å")
            print("7. –í—ã—Ö–æ–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
            
            if choice == '1':
                self.field.display()
            elif choice == '2':
                self.create_unit()
            elif choice == '3':
                self.move_unit()
            elif choice == '4':
                self.attack_menu()
            elif choice == '5':
                self.next_turn()
            elif choice == '6':
                self.show_status()
            elif choice == '7':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def create_unit(self):
        if not self.field.bases:
            print("‚ùå –ù–µ—Ç –±–∞–∑ –Ω–∞ –ø–æ–ª–µ")
            return
        
        base = self.field.bases[0]  # –ë–∞–∑–∞ –∏–≥—Ä–æ–∫–∞
        print("\nüè≠ –°–û–ó–î–ê–ù–ò–ï –Æ–ù–ò–¢–ê")
        print("1. –í–æ–∏–Ω (100 —Ä–µ—Å—É—Ä—Å–æ–≤) - —Å–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞, –±—Ä–æ–Ω—è")
        print("2. –õ—É—á–Ω–∏–∫ (100 —Ä–µ—Å—É—Ä—Å–æ–≤) - –¥–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞") 
        print("3. –†—ã—Ü–∞—Ä—å (100 —Ä–µ—Å—É—Ä—Å–æ–≤) - –º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")
        
        unit_types = {'1': 'warrior', '2': 'archer', '3': 'knight'}
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —é–Ω–∏—Ç–∞: ")
        
        if choice in unit_types:
            base.create_unit(unit_types[choice], self.field)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def move_unit(self):
        if not self.field.units:
            print("‚ùå –ù–µ—Ç —é–Ω–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª–µ")
            return
        
        player_units = [u for u in self.field.units if u in self.field.bases[0].owned_units]
        if not player_units:
            print("‚ùå –ù–µ—Ç –≤–∞—à–∏—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            return
        
        print("\nüéØ –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –Æ–ù–ò–¢–ê")
        for i, unit in enumerate(player_units):
            x, y = unit.get_position()
            print(f"{i+1}. {unit.name} –Ω–∞ ({x}, {y}) - –¥–∞–ª—å–Ω–æ—Å—Ç—å: {unit.move_range}")
        
        try:
            idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞: ")) - 1
            if 0 <= idx < len(player_units):
                unit = player_units[idx]
                current_x, current_y = unit.get_position()
                
                print(f"\nüìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ({current_x}, {current_y})")
                print(f"üéØ –î–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {unit.move_range} –∫–ª–µ—Ç–æ–∫")
                
                x = int(input("–ù–æ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X: "))
                y = int(input("–ù–æ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y: "))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                distance = abs(x - current_x) + abs(y - current_y)
                if distance > unit.move_range:
                    print(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ú–∞–∫—Å–∏–º—É–º {unit.move_range} –∫–ª–µ—Ç–æ–∫")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
                if not (0 <= x < self.field.width and 0 <= y < self.field.height):
                    print("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
                if self.field.grid[y][x] is not None:
                    print("‚ùå –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞")
                    return
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —é–Ω–∏—Ç–∞
                self.field.grid[current_y][current_x] = None
                unit.set_position(x, y)
                self.field.grid[y][x] = unit
                print(f"‚úÖ {unit.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ ({x}, {y})")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def attack_menu(self):
        """–ú–µ–Ω—é –∞—Ç–∞–∫–∏"""
        player_units = [u for u in self.field.units if u in self.field.bases[0].owned_units]
        if not player_units:
            print("‚ùå –ù–µ—Ç –≤–∞—à–∏—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏")
            return
        
        enemy_units = [u for u in self.field.units if u in self.enemy_base.owned_units]
        if not enemy_units:
            print("üéâ –í—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!")
            return
        
        print("\n‚öîÔ∏è –ê–¢–ê–ö–ê")
        print("–í–∞—à–∏ —é–Ω–∏—Ç—ã:")
        for i, unit in enumerate(player_units):
            x, y = unit.get_position()
            print(f"{i+1}. {unit.name} –Ω–∞ ({x}, {y}) - –∞—Ç–∞–∫–∞: {unit.attack}")
        
        try:
            attacker_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ —é–Ω–∏—Ç–∞: ")) - 1
            if 0 <= attacker_idx < len(player_units):
                attacker = player_units[attacker_idx]
                
                print("\n–¶–µ–ª–∏:")
                for i, target in enumerate(enemy_units):
                    x, y = target.get_position()
                    distance = self.calculate_distance(attacker, target)
                    print(f"{i+1}. {target.name} –Ω–∞ ({x}, {y}) - HP: {target.health}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}")
                
                target_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: ")) - 1
                if 0 <= target_idx < len(enemy_units):
                    target = enemy_units[target_idx]
                    self.perform_attack(attacker, target)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞—Ç–∞–∫—É—é—â–µ–≥–æ")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def calculate_distance(self, unit1, unit2):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —é–Ω–∏—Ç–∞–º–∏"""
        x1, y1 = unit1.get_position()
        x2, y2 = unit2.get_position()
        return abs(x1 - x2) + abs(y1 - y2)
    
    def perform_attack(self, attacker, target):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ç–∞–∫—É"""
        distance = self.calculate_distance(attacker, target)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (—É –ª—É—á–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ)
        max_range = 2 if "–ª—É—á–Ω–∏–∫" in attacker.name.lower() else 1
        if distance > max_range:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: {max_range}")
            return
        
        damage = max(1, attacker.attack - target.armor)
        target.take_damage(damage)
        print(f"‚öîÔ∏è {attacker.name} –∞—Ç–∞–∫—É–µ—Ç {target.name} –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!")
        
        if not target.is_alive():
            print(f"üíÄ {target.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
            # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤–æ–≥–æ —é–Ω–∏—Ç–∞ —Å –ø–æ–ª—è
            x, y = target.get_position()
            self.field.grid[y][x] = None
            self.field.units.remove(target)
            self.enemy_base.owned_units.remove(target)
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
        print(f"\nüìä –°–¢–ê–¢–£–° –ò–ì–†–´")
        print(f"–•–æ–¥: {self.turn_count}")
        
        player_base = self.field.bases[0]
        print(f"\nüé™ –í–∞—à–∞ –±–∞–∑–∞: {player_base.get_status()}")
        
        print(f"\nüëπ –í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞: {self.enemy_base.get_status()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
        if not self.enemy_base.owned_units and self.turn_count > 1:
            print("\nüéâ –ü–û–ë–ï–î–ê! –í—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!")
        elif not player_base.owned_units and self.turn_count > 1:
            print("\nüíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –í—Å–µ –≤–∞—à–∏ —é–Ω–∏—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!")
    
    def next_turn(self):
        self.turn_count += 1
        
        # –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
        for base in self.field.bases:
            if base == self.field.bases[0]:  # –ò–≥—Ä–æ–∫
                base.resources += 30
            else:  # –í—Ä–∞–≥
                base.resources += 25
        
        print(f"\nüîÑ –•–æ–¥ {self.turn_count}")
        print("üí∞ –ë–∞–∑—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Å—É—Ä—Å—ã")
        
        # –•–æ–¥ –ò–ò
        self.enemy_ai.take_turn()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        self.check_win_condition()
    
    def check_win_condition(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã"""
        if not self.enemy_base.owned_units:
            print("\nüéâ –ü–û–ë–ï–î–ê! –í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!")
            return True
        elif not self.field.bases[0].owned_units:
            print("\nüíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –í–∞—à–∞ –±–∞–∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!")
            return True
        return False
    
    def start(self):
        print("üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ò–ì–†–£!")
        print("–ü—Ä–æ—Å—Ç–∞—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
        print("–¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã!")
        
        self.initialize()
        self.show_menu()

def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    game = SimpleGame()
    game.start()

if __name__ == "__main__":
    main()