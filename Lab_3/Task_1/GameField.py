import copy
from typing import List, Optional, Tuple

from Units import *

import copy
import random
from typing import List, Optional, Tuple, Dict

class GameField:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —é–Ω–∏—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏"""
    
    def __init__(self, width: int, height: int, max_units: int = 50):
        if width <= 0 or height <= 0:
            raise ValueError("–†–∞–∑–º–µ—Ä—ã –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
        if max_units <= 0:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
        self.width = width
        self.height = height
        self.max_units = max_units
        self.grid = [[None for _ in range(width)] for _ in range(height)]
        self.units = []
        self.unit_id_counter = 1  # –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —é–Ω–∏—Ç–∞–º

    def add_unit(self, unit: Unit, x: int, y: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —é–Ω–∏—Ç–∞ –Ω–∞ –ø–æ–ª–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if len(self.units) >= self.max_units:
            print(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤: {self.max_units}")
            return False
            
        if not self._is_valid_position(x, y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})")
            return False
            
        if not self.is_cell_empty(x, y):
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({x}, {y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
            return False
            
        if not unit.is_alive():
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω")
            return False

        # –†–∞–∑–º–µ—â–∞–µ–º —é–Ω–∏—Ç–∞
        unit.set_position(x, y)
        unit.id = self.unit_id_counter  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        self.unit_id_counter += 1
        
        self.grid[y][x] = unit
        self.units.append(unit)
        
        print(f"‚úÖ {unit.name} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫–µ ({x}, {y})")
        return True

    def remove_unit(self, unit: Unit) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —é–Ω–∏—Ç–∞ —Å –ø–æ–ª—è"""
        if unit not in self.units:
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ª–µ")
            return False
            
        x, y = unit.get_position()
        if self._is_valid_position(x, y) and self.grid[y][x] == unit:
            self.grid[y][x] = None
            
        self.units.remove(unit)
        print(f"üóëÔ∏è –Æ–Ω–∏—Ç {unit.name} —É–¥–∞–ª–µ–Ω —Å –ø–æ–ª—è")
        return True

    def move_unit(self, unit: Unit, new_x: int, new_y: int) -> bool:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —é–Ω–∏—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        if unit not in self.units:
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ª–µ")
            return False
            
        if not self._is_valid_position(new_x, new_y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({new_x}, {new_y})")
            return False
            
        if not self.is_cell_empty(new_x, new_y):
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({new_x}, {new_y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        old_x, old_y = unit.get_position()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —é–Ω–∏—Ç–æ–º
        if not unit.move(new_x, new_y):
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        self.grid[old_y][old_x] = None
        self.grid[new_y][new_x] = unit
        unit.set_position(new_x, new_y)
        
        print(f"üéØ {unit.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å ({old_x}, {old_y}) –Ω–∞ ({new_x}, {new_y})")
        return True

    def get_unit_at(self, x: int, y: int) -> Optional[Unit]:
        """–ü–æ–ª—É—á–∏—Ç—å —é–Ω–∏—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–µ"""
        if not self._is_valid_position(x, y):
            return None
        return self.grid[y][x]

    def is_cell_empty(self, x: int, y: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞"""
        return self.get_unit_at(x, y) is None

    def get_units_in_range(self, center_x: int, center_y: int, radius: int) -> List[Unit]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"""
        units_in_range = []
        for y in range(max(0, center_y - radius), min(self.height, center_y + radius + 1)):
            for x in range(max(0, center_x - radius), min(self.width, center_x + radius + 1)):
                unit = self.get_unit_at(x, y)
                if unit and unit != self.get_unit_at(center_x, center_y):
                    distance = abs(x - center_x) + abs(y - center_y)
                    if distance <= radius:
                        units_in_range.append(unit)
        return units_in_range

    def attack_unit(self, attacker: Unit, target_x: int, target_y: int) -> bool:
        """–ê—Ç–∞–∫–∞ —é–Ω–∏—Ç–∞ –¥—Ä—É–≥–∏–º —é–Ω–∏—Ç–æ–º"""
        target = self.get_unit_at(target_x, target_y)
        if not target:
            print(f"‚ùå –í –∫–ª–µ—Ç–∫–µ ({target_x}, {target_y}) –Ω–µ—Ç —é–Ω–∏—Ç–∞")
            return False
            
        if attacker == target:
            print("‚ùå –ù–µ–ª—å–∑—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return False
            
        if not attacker.is_alive():
            print(f"‚ùå {attacker.name} –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å")
            return False
            
        if not target.is_alive():
            print(f"‚ùå {target.name} —É–∂–µ –º–µ—Ä—Ç–≤")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –¥–ª—è –ª—É—á–Ω–∏–∫–æ–≤
        if isinstance(attacker, Archer):
            if not attacker.can_attack(target_x, target_y):
                print(f"‚ùå {attacker.name} –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç–∞–∫ –¥–∞–ª–µ–∫–æ")
                return False

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        damage = attacker.attack
        actual_damage = target.take_damage(damage)
        
        print(f"‚öîÔ∏è {attacker.name} –∞—Ç–∞–∫—É–µ—Ç {target.name}!")
        print(f"üí• –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {actual_damage}")
        
        if not target.is_alive():
            print(f"üíÄ {target.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
            self.remove_unit(target)
            
        return True

    def _is_valid_position(self, x: int, y: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è"""
        return 0 <= x < self.width and 0 <= y < self.height

    def get_empty_cells(self) -> List[Tuple[int, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫"""
        empty_cells = []
        for y in range(self.height):
            for x in range(self.width):
                if self.is_cell_empty(x, y):
                    empty_cells.append((x, y))
        return empty_cells

    def display(self):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–µ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        print(f"\nüéÆ –ò–ì–†–û–í–û–ï –ü–û–õ–ï {self.width}x{self.height} (—é–Ω–∏—Ç–æ–≤: {len(self.units)}/{self.max_units})")
        print("   " + " ".join(f"{i:2}" for i in range(self.width)))
        
        for y in range(self.height):
            row_str = f"{y:2} "
            for x in range(self.width):
                unit = self.grid[y][x]
                if unit:
                    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —é–Ω–∏—Ç–æ–≤
                    if isinstance(unit, Infantry):
                        symbol = "I"
                    elif isinstance(unit, Archer):
                        symbol = "A"
                    elif isinstance(unit, Cavalry):
                        symbol = "C"
                    elif isinstance(unit, Healer):
                        symbol = "H"
                    else:
                        symbol = "U"
                    row_str += f" {symbol} "
                else:
                    row_str += " . "
            print(row_str)

    def get_unit_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —é–Ω–∏—Ç–∞—Ö –Ω–∞ –ø–æ–ª–µ"""
        print(f"\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –Æ–ù–ò–¢–ê–•:")
        for i, unit in enumerate(self.units, 1):
            x, y = unit.get_position()
            status = "–∂–∏–≤" if unit.is_alive() else "–º–µ—Ä—Ç–≤"
            print(f"{i}. {unit.name} [{unit.id}] - ({x}, {y}) - HP: {unit.health}/{unit.max_health} - {status}")

    def __deepcopy__(self, memo):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –∫–æ–ø–∏–∏ –ø–æ–ª—è —Å —é–Ω–∏—Ç–∞–º–∏"""
        new_field = GameField(self.width, self.height, self.max_units)
        new_field.unit_id_counter = self.unit_id_counter
        
        # –ö–æ–ø–∏—Ä—É–µ–º —é–Ω–∏—Ç–æ–≤
        for unit in self.units:
            unit_copy = copy.deepcopy(unit)
            x, y = unit.get_position()
            new_field.add_unit(unit_copy, x, y)
            
        return new_field

    def save_state(self) -> dict:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'width': self.width,
            'height': self.height,
            'max_units': self.max_units,
            'unit_id_counter': self.unit_id_counter,
            'units': [
                {
                    'type': unit.__class__.__name__,
                    'x': unit.x,
                    'y': unit.y,
                    'health': unit.health,
                    'max_health': unit.max_health
                }
                for unit in self.units
            ]
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
    field = GameField(width=5, height=5, max_units=10)
    
    # –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–æ–≤
    swordsman = Swordsman()
    archer = Crossbowman()
    knight = Knight()
    healer = Healer()
    
    # –†–∞–∑–º–µ—â–∞–µ–º —é–Ω–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª–µ
    field.add_unit(swordsman, 1, 1)
    field.add_unit(archer, 3, 2)
    field.add_unit(knight, 2, 3)
    field.add_unit(healer, 4, 4)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ
    field.display()
    field.get_unit_info()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    print("\n--- –¢–ï–°–¢ –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø ---")
    field.move_unit(swordsman, 2, 1)
    field.display()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ç–∞–∫—É
    print("\n--- –¢–ï–°–¢ –ê–¢–ê–ö–ò ---")
    field.attack_unit(archer, 2, 1)  # –õ—É—á–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç –º–µ—á–Ω–∏–∫–∞
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–æ–ª—è
    print("\n--- –¢–ï–°–¢ –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ---")
    field_copy = copy.deepcopy(field)
    field_copy.display()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
    print("\n--- –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í –†–ê–î–ò–£–°–ï ---")
    units_near = field.get_units_in_range(2, 1, 2)
    print(f"–Æ–Ω–∏—Ç—ã —Ä—è–¥–æ–º —Å (2, 1): {[unit.name for unit in units_near]}")